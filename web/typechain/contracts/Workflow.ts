/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace Workflow {
  export type MetadataStruct = { key: string; value: string };

  export type MetadataStructOutput = [key: string, value: string] & {
    key: string;
    value: string;
  };

  export type StepStruct = {
    name: string;
    stepType: BigNumberish;
    metadata: Workflow.MetadataStruct;
  };

  export type StepStructOutput = [
    name: string,
    stepType: bigint,
    metadata: Workflow.MetadataStructOutput
  ] & {
    name: string;
    stepType: bigint;
    metadata: Workflow.MetadataStructOutput;
  };
}

export interface WorkflowInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "deposit"
      | "finalizePayment"
      | "getAllProgress"
      | "getAllSteps"
      | "getHookAddress"
      | "getNftAddress"
      | "getOwner"
      | "getPayee"
      | "getProgressCount"
      | "getStep"
      | "getStepsCount"
      | "getUsdcAddress"
      | "getWorkflowAmount"
      | "hookAddress"
      | "nftAddress"
      | "owner"
      | "payee"
      | "progress"
      | "releaseFund"
      | "renounceOwnership"
      | "steps"
      | "transferOwnership"
      | "updateProgress"
      | "usdcAddress"
      | "withdraw"
      | "workflowAmount"
      | "workflowName"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Deposit"
      | "OwnershipTransferred"
      | "PaymentTriggered"
      | "ReleaseFund"
      | "Withdrawn"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "finalizePayment",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllProgress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllSteps",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getHookAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNftAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getOwner", values?: undefined): string;
  encodeFunctionData(functionFragment: "getPayee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getProgressCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStep",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getStepsCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUsdcAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getWorkflowAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hookAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nftAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "payee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "progress",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "releaseFund",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "steps", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateProgress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "usdcAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "workflowAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "workflowName",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "finalizePayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllProgress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllSteps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getHookAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNftAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getPayee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getProgressCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getStep", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getStepsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUsdcAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWorkflowAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hookAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nftAddress", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "payee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "progress", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "releaseFund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "steps", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateProgress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "usdcAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "workflowAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "workflowName",
    data: BytesLike
  ): Result;
}

export namespace DepositEvent {
  export type InputTuple = [user: AddressLike, depositAmount: BigNumberish];
  export type OutputTuple = [user: string, depositAmount: bigint];
  export interface OutputObject {
    user: string;
    depositAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PaymentTriggeredEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReleaseFundEvent {
  export type InputTuple = [user: AddressLike, workflowAmount: BigNumberish];
  export type OutputTuple = [user: string, workflowAmount: bigint];
  export interface OutputObject {
    user: string;
    workflowAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawnEvent {
  export type InputTuple = [
    user: AddressLike,
    withdrawAmount: BigNumberish,
    reason: string
  ];
  export type OutputTuple = [
    user: string,
    withdrawAmount: bigint,
    reason: string
  ];
  export interface OutputObject {
    user: string;
    withdrawAmount: bigint;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Workflow extends BaseContract {
  connect(runner?: ContractRunner | null): Workflow;
  waitForDeployment(): Promise<this>;

  interface: WorkflowInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  deposit: TypedContractMethod<
    [depositAmount: BigNumberish],
    [void],
    "payable"
  >;

  finalizePayment: TypedContractMethod<[], [void], "nonpayable">;

  getAllProgress: TypedContractMethod<[], [bigint[]], "view">;

  getAllSteps: TypedContractMethod<[], [Workflow.StepStructOutput[]], "view">;

  getHookAddress: TypedContractMethod<[], [string], "view">;

  getNftAddress: TypedContractMethod<[], [string], "view">;

  getOwner: TypedContractMethod<[], [string], "view">;

  getPayee: TypedContractMethod<[], [string], "view">;

  getProgressCount: TypedContractMethod<[], [bigint], "view">;

  getStep: TypedContractMethod<
    [stepIndex: BigNumberish],
    [Workflow.StepStructOutput],
    "view"
  >;

  getStepsCount: TypedContractMethod<[], [bigint], "view">;

  getUsdcAddress: TypedContractMethod<[], [string], "view">;

  getWorkflowAmount: TypedContractMethod<[], [bigint], "view">;

  hookAddress: TypedContractMethod<[], [string], "view">;

  nftAddress: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  payee: TypedContractMethod<[], [string], "view">;

  progress: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  releaseFund: TypedContractMethod<[], [void], "nonpayable">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  steps: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, Workflow.MetadataStructOutput] & {
        name: string;
        stepType: bigint;
        metadata: Workflow.MetadataStructOutput;
      }
    ],
    "view"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateProgress: TypedContractMethod<[], [void], "nonpayable">;

  usdcAddress: TypedContractMethod<[], [string], "view">;

  withdraw: TypedContractMethod<
    [withdrawAmount: BigNumberish, reason: string],
    [void],
    "nonpayable"
  >;

  workflowAmount: TypedContractMethod<[], [bigint], "view">;

  workflowName: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<[depositAmount: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "finalizePayment"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getAllProgress"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getAllSteps"
  ): TypedContractMethod<[], [Workflow.StepStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getHookAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getNftAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getOwner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getPayee"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getProgressCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getStep"
  ): TypedContractMethod<
    [stepIndex: BigNumberish],
    [Workflow.StepStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getStepsCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUsdcAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getWorkflowAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "hookAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "nftAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "payee"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "progress"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "releaseFund"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "steps"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, Workflow.MetadataStructOutput] & {
        name: string;
        stepType: bigint;
        metadata: Workflow.MetadataStructOutput;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateProgress"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "usdcAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<
    [withdrawAmount: BigNumberish, reason: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "workflowAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "workflowName"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "Deposit"
  ): TypedContractEvent<
    DepositEvent.InputTuple,
    DepositEvent.OutputTuple,
    DepositEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PaymentTriggered"
  ): TypedContractEvent<
    PaymentTriggeredEvent.InputTuple,
    PaymentTriggeredEvent.OutputTuple,
    PaymentTriggeredEvent.OutputObject
  >;
  getEvent(
    key: "ReleaseFund"
  ): TypedContractEvent<
    ReleaseFundEvent.InputTuple,
    ReleaseFundEvent.OutputTuple,
    ReleaseFundEvent.OutputObject
  >;
  getEvent(
    key: "Withdrawn"
  ): TypedContractEvent<
    WithdrawnEvent.InputTuple,
    WithdrawnEvent.OutputTuple,
    WithdrawnEvent.OutputObject
  >;

  filters: {
    "Deposit(address,uint256)": TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;
    Deposit: TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PaymentTriggered()": TypedContractEvent<
      PaymentTriggeredEvent.InputTuple,
      PaymentTriggeredEvent.OutputTuple,
      PaymentTriggeredEvent.OutputObject
    >;
    PaymentTriggered: TypedContractEvent<
      PaymentTriggeredEvent.InputTuple,
      PaymentTriggeredEvent.OutputTuple,
      PaymentTriggeredEvent.OutputObject
    >;

    "ReleaseFund(address,uint256)": TypedContractEvent<
      ReleaseFundEvent.InputTuple,
      ReleaseFundEvent.OutputTuple,
      ReleaseFundEvent.OutputObject
    >;
    ReleaseFund: TypedContractEvent<
      ReleaseFundEvent.InputTuple,
      ReleaseFundEvent.OutputTuple,
      ReleaseFundEvent.OutputObject
    >;

    "Withdrawn(address,uint256,string)": TypedContractEvent<
      WithdrawnEvent.InputTuple,
      WithdrawnEvent.OutputTuple,
      WithdrawnEvent.OutputObject
    >;
    Withdrawn: TypedContractEvent<
      WithdrawnEvent.InputTuple,
      WithdrawnEvent.OutputTuple,
      WithdrawnEvent.OutputObject
    >;
  };
}
