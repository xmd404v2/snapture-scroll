/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface HookInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "_finalizeJob"
      | "attestationCount"
      | "createWorkflow"
      | "debugMessage"
      | "didReceiveAttestation(address,uint64,uint64,bytes)"
      | "didReceiveAttestation(address,uint64,uint64,address,uint256,bytes)"
      | "didReceiveRevocation(address,uint64,uint64,bytes)"
      | "didReceiveRevocation(address,uint64,uint64,address,uint256,bytes)"
      | "getAllWorkflows"
      | "hasAttested"
      | "nft"
      | "owner"
      | "renounceOwnership"
      | "setThreshold"
      | "setWhitelist"
      | "threshold"
      | "transferOwnership"
      | "usdc"
      | "whitelist"
      | "workflowExists"
      | "workflows"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "OwnershipTransferred" | "WorkflowCreated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "_finalizeJob",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "attestationCount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createWorkflow",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "debugMessage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "didReceiveAttestation(address,uint64,uint64,bytes)",
    values: [AddressLike, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "didReceiveAttestation(address,uint64,uint64,address,uint256,bytes)",
    values: [
      AddressLike,
      BigNumberish,
      BigNumberish,
      AddressLike,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "didReceiveRevocation(address,uint64,uint64,bytes)",
    values: [AddressLike, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "didReceiveRevocation(address,uint64,uint64,address,uint256,bytes)",
    values: [
      AddressLike,
      BigNumberish,
      BigNumberish,
      AddressLike,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllWorkflows",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hasAttested",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "nft", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setThreshold",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setWhitelist",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(functionFragment: "threshold", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "usdc", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "whitelist",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "workflowExists",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "workflows",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "_finalizeJob",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "attestationCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createWorkflow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "debugMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "didReceiveAttestation(address,uint64,uint64,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "didReceiveAttestation(address,uint64,uint64,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "didReceiveRevocation(address,uint64,uint64,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "didReceiveRevocation(address,uint64,uint64,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllWorkflows",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasAttested",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nft", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "threshold", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usdc", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "whitelist", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "workflowExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "workflows", data: BytesLike): Result;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WorkflowCreatedEvent {
  export type InputTuple = [workflowAddress: AddressLike];
  export type OutputTuple = [workflowAddress: string];
  export interface OutputObject {
    workflowAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Hook extends BaseContract {
  connect(runner?: ContractRunner | null): Hook;
  waitForDeployment(): Promise<this>;

  interface: HookInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  _finalizeJob: TypedContractMethod<
    [_workflowAddress: AddressLike, _tokenUri: string],
    [void],
    "nonpayable"
  >;

  attestationCount: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  createWorkflow: TypedContractMethod<
    [_workflowAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  debugMessage: TypedContractMethod<[], [string], "view">;

  "didReceiveAttestation(address,uint64,uint64,bytes)": TypedContractMethod<
    [
      attester: AddressLike,
      arg1: BigNumberish,
      attestationId: BigNumberish,
      arg3: BytesLike
    ],
    [void],
    "payable"
  >;

  "didReceiveAttestation(address,uint64,uint64,address,uint256,bytes)": TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: BigNumberish,
      arg2: BigNumberish,
      arg3: AddressLike,
      arg4: BigNumberish,
      arg5: BytesLike
    ],
    [void],
    "view"
  >;

  "didReceiveRevocation(address,uint64,uint64,bytes)": TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: BigNumberish,
      arg2: BigNumberish,
      arg3: BytesLike
    ],
    [void],
    "payable"
  >;

  "didReceiveRevocation(address,uint64,uint64,address,uint256,bytes)": TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: BigNumberish,
      arg2: BigNumberish,
      arg3: AddressLike,
      arg4: BigNumberish,
      arg5: BytesLike
    ],
    [void],
    "view"
  >;

  getAllWorkflows: TypedContractMethod<[], [string[]], "view">;

  hasAttested: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  nft: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setThreshold: TypedContractMethod<
    [threshold_: BigNumberish],
    [void],
    "nonpayable"
  >;

  setWhitelist: TypedContractMethod<
    [attester: AddressLike, allowed: boolean],
    [void],
    "nonpayable"
  >;

  threshold: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  usdc: TypedContractMethod<[], [string], "view">;

  whitelist: TypedContractMethod<[attester: AddressLike], [boolean], "view">;

  workflowExists: TypedContractMethod<
    [_workflowAddress: AddressLike],
    [boolean],
    "view"
  >;

  workflows: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "_finalizeJob"
  ): TypedContractMethod<
    [_workflowAddress: AddressLike, _tokenUri: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "attestationCount"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "createWorkflow"
  ): TypedContractMethod<[_workflowAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "debugMessage"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "didReceiveAttestation(address,uint64,uint64,bytes)"
  ): TypedContractMethod<
    [
      attester: AddressLike,
      arg1: BigNumberish,
      attestationId: BigNumberish,
      arg3: BytesLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "didReceiveAttestation(address,uint64,uint64,address,uint256,bytes)"
  ): TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: BigNumberish,
      arg2: BigNumberish,
      arg3: AddressLike,
      arg4: BigNumberish,
      arg5: BytesLike
    ],
    [void],
    "view"
  >;
  getFunction(
    nameOrSignature: "didReceiveRevocation(address,uint64,uint64,bytes)"
  ): TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: BigNumberish,
      arg2: BigNumberish,
      arg3: BytesLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "didReceiveRevocation(address,uint64,uint64,address,uint256,bytes)"
  ): TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: BigNumberish,
      arg2: BigNumberish,
      arg3: AddressLike,
      arg4: BigNumberish,
      arg5: BytesLike
    ],
    [void],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAllWorkflows"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "hasAttested"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "nft"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setThreshold"
  ): TypedContractMethod<[threshold_: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setWhitelist"
  ): TypedContractMethod<
    [attester: AddressLike, allowed: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "threshold"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "usdc"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "whitelist"
  ): TypedContractMethod<[attester: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "workflowExists"
  ): TypedContractMethod<[_workflowAddress: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "workflows"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "WorkflowCreated"
  ): TypedContractEvent<
    WorkflowCreatedEvent.InputTuple,
    WorkflowCreatedEvent.OutputTuple,
    WorkflowCreatedEvent.OutputObject
  >;

  filters: {
    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "WorkflowCreated(address)": TypedContractEvent<
      WorkflowCreatedEvent.InputTuple,
      WorkflowCreatedEvent.OutputTuple,
      WorkflowCreatedEvent.OutputObject
    >;
    WorkflowCreated: TypedContractEvent<
      WorkflowCreatedEvent.InputTuple,
      WorkflowCreatedEvent.OutputTuple,
      WorkflowCreatedEvent.OutputObject
    >;
  };
}
