/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface ISnaptureWorkflowInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "deposit"
      | "finalizePayment"
      | "getOwner"
      | "getProgressCount"
      | "getStepsCount"
      | "updateProgress"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "finalizePayment",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getOwner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getProgressCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStepsCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateProgress",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "finalizePayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getProgressCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStepsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateProgress",
    data: BytesLike
  ): Result;
}

export interface ISnaptureWorkflow extends BaseContract {
  connect(runner?: ContractRunner | null): ISnaptureWorkflow;
  waitForDeployment(): Promise<this>;

  interface: ISnaptureWorkflowInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  deposit: TypedContractMethod<
    [depositAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  finalizePayment: TypedContractMethod<[], [void], "nonpayable">;

  getOwner: TypedContractMethod<[], [string], "view">;

  getProgressCount: TypedContractMethod<[], [bigint], "view">;

  getStepsCount: TypedContractMethod<[], [bigint], "view">;

  updateProgress: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<[depositAmount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "finalizePayment"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getOwner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getProgressCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getStepsCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "updateProgress"
  ): TypedContractMethod<[], [void], "nonpayable">;

  filters: {};
}
