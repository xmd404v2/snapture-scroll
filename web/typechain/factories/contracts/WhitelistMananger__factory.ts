/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  WhitelistMananger,
  WhitelistManangerInterface,
} from "../../contracts/WhitelistMananger";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "OwnableInvalidOwner",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "OwnableUnauthorizedAccount",
    type: "error",
  },
  {
    inputs: [],
    name: "UnauthorizedAttester",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "attester",
        type: "address",
      },
      {
        internalType: "bool",
        name: "allowed",
        type: "bool",
      },
    ],
    name: "setWhitelist",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "attester",
        type: "address",
      },
    ],
    name: "whitelist",
    outputs: [
      {
        internalType: "bool",
        name: "allowed",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5033600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036100845760006040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260040161007b919061019e565b60405180910390fd5b6100938161009960201b60201c565b506101b9565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006101888261015d565b9050919050565b6101988161017d565b82525050565b60006020820190506101b3600083018461018f565b92915050565b610517806101c86000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c806353d6fd591461005c578063715018a6146100785780638da5cb5b146100825780639b19251a146100a0578063f2fde38b146100d0575b600080fd5b61007660048036038101906100719190610420565b6100ec565b005b61008061014f565b005b61008a610163565b604051610097919061046f565b60405180910390f35b6100ba60048036038101906100b5919061048a565b61018c565b6040516100c791906104c6565b60405180910390f35b6100ea60048036038101906100e5919061048a565b6101ac565b005b6100f4610232565b80600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b610157610232565b61016160006102b9565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60016020528060005260406000206000915054906101000a900460ff1681565b6101b4610232565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036102265760006040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260040161021d919061046f565b60405180910390fd5b61022f816102b9565b50565b61023a61037d565b73ffffffffffffffffffffffffffffffffffffffff16610258610163565b73ffffffffffffffffffffffffffffffffffffffff16146102b75761027b61037d565b6040517f118cdaa70000000000000000000000000000000000000000000000000000000081526004016102ae919061046f565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006103b58261038a565b9050919050565b6103c5816103aa565b81146103d057600080fd5b50565b6000813590506103e2816103bc565b92915050565b60008115159050919050565b6103fd816103e8565b811461040857600080fd5b50565b60008135905061041a816103f4565b92915050565b6000806040838503121561043757610436610385565b5b6000610445858286016103d3565b92505060206104568582860161040b565b9150509250929050565b610469816103aa565b82525050565b60006020820190506104846000830184610460565b92915050565b6000602082840312156104a05761049f610385565b5b60006104ae848285016103d3565b91505092915050565b6104c0816103e8565b82525050565b60006020820190506104db60008301846104b7565b9291505056fea264697066735822122036e722fee040c133b8c201b981a3740c2c7c92b1b5df2b40ac46eb95db80660864736f6c634300081b0033";

type WhitelistManangerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: WhitelistManangerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class WhitelistMananger__factory extends ContractFactory {
  constructor(...args: WhitelistManangerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      WhitelistMananger & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): WhitelistMananger__factory {
    return super.connect(runner) as WhitelistMananger__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): WhitelistManangerInterface {
    return new Interface(_abi) as WhitelistManangerInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): WhitelistMananger {
    return new Contract(address, _abi, runner) as unknown as WhitelistMananger;
  }
}
