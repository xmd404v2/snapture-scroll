/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  ISnaptureWorkflow,
  ISnaptureWorkflowInterface,
} from "../../../contracts/interfaces/ISnaptureWorkflow";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "depositAmount",
        type: "uint256",
      },
    ],
    name: "deposit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "finalizePayment",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getOwner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getProgressCount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getStepsCount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "updateProgress",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class ISnaptureWorkflow__factory {
  static readonly abi = _abi;
  static createInterface(): ISnaptureWorkflowInterface {
    return new Interface(_abi) as ISnaptureWorkflowInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): ISnaptureWorkflow {
    return new Contract(address, _abi, runner) as unknown as ISnaptureWorkflow;
  }
}
